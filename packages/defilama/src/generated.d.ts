/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/protocols": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List all protocols on defillama along with their tvl */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/protocol/{protocol}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get historical TVL of a protocol and breakdowns by token and chain */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description protocol slug */
                    protocol: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/historicalChainTvl": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get historical TVL (excludes liquid staking and double counted tvl) of DeFi on all chains */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/historicalChainTvl/{chain}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get historical TVL (excludes liquid staking and double counted tvl) of a chain */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description chain slug, you can get these from /chains or the chains property on /protocols */
                    chain: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tvl/{protocol}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Simplified endpoint to get current TVL of a protocol
         * @description Simplified endpoint that only returns a number, the current TVL of a protocol
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description protocol slug */
                    protocol: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/chains": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get current TVL of all chains */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/prices/current/{coins}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get current prices of tokens by contract address
         * @description The goal of this API is to price as many tokens as possible, including exotic ones that never get traded, which makes them impossible to price by looking at markets.
         *
         *     The base of our data are prices pulled from coingecko, which is then extended through multiple means:
         *     - We price all bridged tokens by using the price of the token in it's original chain, so we fetch all bridged versions of USDC on arbitrum, fantom, avax... and price all them using the price for the token on Ethereum, which we know. Right now we support 10 different bridging protocols.
         *     - We have multiple adapters to price specialized sets of tokens by running custom code:
         *       - We price yearn's yToken LPs by checking how much underlying token can be withdrawn for each LP
         *       - Aave, compound and euler LP tokens are also priced based on their relationship against underlying tokens
         *       - Uniswap, curve, balancer and stargate LPs are priced using the underlying tokens in each pair
         *       - GMX's GLP token is priced based on the value of tokens given on withdrawal (which includes calculations based on trader's PnL)
         *
         *       - Synthetix tokens are priced using forex prices of the coin they are pegged to
         *     - For tokens that we haven't been able to price in any other way, we find the pool with most liquidity for each on uniswap, curve and serum and then use the prices provided on those exchanges.
         *
         *       Unlike all the other tokens, we can't confirm that these prices are correct, so we only ingest the ones that have sufficient liquidity and, even in that case, we attach a `confidence` value to them that is related to the depth of liquidity and which represents our confidence in the quality of each price. API consumers can choose to filter out prices with low confidence values.
         *
         *      Our API server is fully open source and we are constantly adding more pricing adapters, extending the amount of tokens we support.
         *
         *     Tokens are queried using {chain}:{address}, where chain is an identifier such as ethereum, bsc, polygon, avax... You can also get tokens by coingecko id by setting `coingecko` as the chain, eg: coingecko:ethereum, coingecko:bitcoin. Examples:
         *       - ethereum:0xdF574c24545E5FfEcb9a659c229253D4111d87e1
         *       - bsc:0x762539b45a1dcce3d36d080f74d1aed37844b878
         *       - coingecko:ethereum
         *       - arbitrum:0x4277f8f2c384827b5273592ff7cebd9f2c1ac258
         *
         */
        get: {
            parameters: {
                query?: {
                    /** @description time range on either side to find price data, defaults to 6 hours */
                    searchWidth?: string;
                };
                header?: never;
                path: {
                    /** @description set of comma-separated tokens defined as {chain}:{address} */
                    coins: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            coins?: {
                                "ethereum:0xdF574c24545E5FfEcb9a659c229253D4111d87e1"?: {
                                    /** @example 8 */
                                    decimals?: number;
                                    /** @example 0.022053735051098835 */
                                    price?: number;
                                    /** @example cDAI */
                                    symbol?: string;
                                    /** @example 0.99 */
                                    timestamp?: number;
                                };
                            };
                        };
                    };
                };
                /** @description Internal error */
                502: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/prices/historical/{timestamp}/{coins}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get historical prices of tokens by contract address
         * @description See /prices/current for explanation on how prices are sourced.
         */
        get: {
            parameters: {
                query?: {
                    /** @description time range on either side to find price data, defaults to 6 hours */
                    searchWidth?: string;
                };
                header?: never;
                path: {
                    /** @description set of comma-separated tokens defined as {chain}:{address} */
                    coins: string;
                    /** @description UNIX timestamp of time when you want historical prices */
                    timestamp: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            coins?: {
                                "ethereum:0xdF574c24545E5FfEcb9a659c229253D4111d87e1"?: {
                                    /** @example 8 */
                                    decimals?: number;
                                    /** @example 0.022053735051098835 */
                                    price?: number;
                                    /** @example cDAI */
                                    symbol?: string;
                                    /** @example 1648680149 */
                                    timestamp?: number;
                                };
                            };
                        };
                    };
                };
                /** @description Internal error */
                502: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/batchHistorical": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get historical prices for multiple tokens at multiple different timestamps
         * @description Strings accepted by period and searchWidth:
         *     Can use regular chart candle notion like ‘4h’ etc where:
         *     W = week, D = day, H = hour, M = minute (not case sensitive)
         *
         */
        get: {
            parameters: {
                query: {
                    /** @description object where keys are coins in the form {chain}:{address}, and values are arrays of requested timestamps */
                    coins: string;
                    /** @description time range on either side to find price data, defaults to 6 hours */
                    searchWidth?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            coins?: {
                                "avax:0xb97ef9ef8734c71904d8002f8b6bc66dd9c48a6e"?: {
                                    /** @example USDC */
                                    symbol?: string;
                                    prices?: {
                                        /** @example 1666876674 */
                                        timestamp?: number;
                                        /** @example 0.999436 */
                                        price?: number;
                                        /** @example 0.99 */
                                        confidence?: number;
                                    }[];
                                };
                            };
                        };
                    };
                };
                /** @description Internal error */
                502: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/chart/{coins}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get token prices at regular time intervals
         * @description Strings accepted by period and searchWidth:
         *     Can use regular chart candle notion like ‘4h’ etc where:
         *     W = week, D = day, H = hour, M = minute (not case sensitive)
         *
         */
        get: {
            parameters: {
                query?: {
                    /** @description unix timestamp of earliest data point requested */
                    start?: number;
                    /** @description unix timestamp of latest data point requested */
                    end?: number;
                    /** @description number of data points returned, defaults to 0 */
                    span?: number;
                    /** @description duration between data points, defaults to 24 hours */
                    period?: string;
                    /** @description time range on either side to find price data, defaults to 10% of period */
                    searchWidth?: string;
                };
                header?: never;
                path: {
                    /** @description set of comma-separated tokens defined as {chain}:{address} */
                    coins: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            coins?: {
                                "ethereum:0xdF574c24545E5FfEcb9a659c229253D4111d87e1"?: {
                                    /** @example 8 */
                                    decimals?: number;
                                    /** @example 0.99 */
                                    confidence?: number;
                                    prices?: {
                                        /** @example 1666790570 */
                                        timestamp?: number;
                                        /** @example 0.984519 */
                                        price?: number;
                                    }[];
                                    /** @example HUSD */
                                    symbol?: string;
                                };
                            };
                        };
                    };
                };
                /** @description Internal error */
                502: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/percentage/{coins}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get percentage change in price over time
         * @description Strings accepted by period:
         *     Can use regular chart candle notion like ‘4h’ etc where:
         *     W = week, D = day, H = hour, M = minute (not case sensitive)
         *
         */
        get: {
            parameters: {
                query?: {
                    /** @description timestamp of data point requested, defaults to time now */
                    timestamp?: number;
                    /** @description whether you want the duration after your given timestamp or not, defaults to false (looking back) */
                    lookForward?: boolean;
                    /** @description duration between data points, defaults to 24 hours */
                    period?: string;
                };
                header?: never;
                path: {
                    /** @description set of comma-separated tokens defined as {chain}:{address} */
                    coins: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            coins?: {
                                /** @example -2.3009954568977147 */
                                "ethereum:0xdF574c24545E5FfEcb9a659c229253D4111d87e1"?: number;
                            };
                        };
                    };
                };
                /** @description Internal error */
                502: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/prices/first/{coins}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get earliest timestamp price record for coins */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description set of comma-separated tokens defined as {chain}:{address} */
                    coins: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            coins?: {
                                "ethereum:0xdF574c24545E5FfEcb9a659c229253D4111d87e1"?: {
                                    /** @example 0.9992047673109988 */
                                    price?: number;
                                    /** @example HUSD */
                                    symbol?: string;
                                    /** @example 1568883821 */
                                    timestamp?: number;
                                };
                            };
                        };
                    };
                };
                /** @description Internal error */
                502: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/block/{chain}/{timestamp}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get the closest block to a timestamp
         * @description Runs binary search over a blockchain's blocks to get the closest one to a timestamp.
         *     Every time this is run we add new data to our database, so each query permanently speeds up future queries.
         *
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Chain which you want to get the block from */
                    chain: string;
                    /** @description UNIX timestamp of the block you are searching for */
                    timestamp: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /**
                             * Format: uint
                             * @example 11150916
                             */
                            height?: number;
                            /**
                             * Format: uint
                             * @example 1603964988
                             */
                            timestamp?: number;
                        };
                    };
                };
                /** @description Invalid chain or timestamp provided */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stablecoins": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List all stablecoins along with their circulating amounts */
        get: {
            parameters: {
                query?: {
                    /** @description set whether to include current stablecoin prices */
                    includePrices?: boolean;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stablecoincharts/all": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get historical mcap sum of all stablecoins */
        get: {
            parameters: {
                query?: {
                    /** @description stablecoin ID, you can get these from /stablecoins */
                    stablecoin?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stablecoincharts/{chain}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get historical mcap sum of all stablecoins in a chain */
        get: {
            parameters: {
                query?: {
                    /** @description stablecoin ID, you can get these from /stablecoins */
                    stablecoin?: number;
                };
                header?: never;
                path: {
                    /** @description chain slug, you can get these from /chains or the chains property on /protocols */
                    chain: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stablecoin/{asset}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get historical mcap and historical chain distribution of a stablecoin */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description stablecoin ID, you can get these from /stablecoins */
                    asset: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stablecoinchains": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get current mcap sum of all stablecoins on each chain */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/stablecoinprices": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get historical prices of all stablecoins */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/pools": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieve the latest data for all pools, including enriched information such as predictions */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/chart/{pool}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get historical APY and TVL of a pool */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description pool id, can be retrieved from /pools (property is called pool) */
                    pool: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/overview/dexs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List all dexs along with summaries of their volumes and dataType history data */
        get: {
            parameters: {
                query?: {
                    /** @description true to exclude aggregated chart from response */
                    excludeTotalDataChart?: boolean;
                    /** @description true to exclude broken down chart from response */
                    excludeTotalDataChartBreakdown?: boolean;
                    /** @description Desired data type, dailyVolume by default. */
                    dataType?: "dailyVolume" | "totalVolume";
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/overview/dexs/{chain}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List all dexs along with summaries of their volumes and dataType history data filtering by chain */
        get: {
            parameters: {
                query?: {
                    /** @description true to exclude aggregated chart from response */
                    excludeTotalDataChart?: boolean;
                    /** @description true to exclude broken down chart from response */
                    excludeTotalDataChartBreakdown?: boolean;
                    /** @description Desired data type, dailyVolume by default. */
                    dataType?: "dailyVolume" | "totalVolume";
                };
                header?: never;
                path: {
                    /** @description chain name, list of all supported chains can be found under allChains attribute in /overview/dexs response */
                    chain: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/summary/dexs/{protocol}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get summary of dex volume with historical data */
        get: {
            parameters: {
                query?: {
                    /** @description true to exclude aggregated chart from response */
                    excludeTotalDataChart?: boolean;
                    /** @description true to exclude broken down chart from response */
                    excludeTotalDataChartBreakdown?: boolean;
                    /** @description Desired data type, dailyVolume by default. */
                    dataType?: "dailyVolume" | "totalVolume";
                };
                header?: never;
                path: {
                    /** @description protocol slug */
                    protocol: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/overview/options": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List all options dexs along with summaries of their volumes and dataType history data */
        get: {
            parameters: {
                query?: {
                    /** @description true to exclude aggregated chart from response */
                    excludeTotalDataChart?: boolean;
                    /** @description true to exclude broken down chart from response */
                    excludeTotalDataChartBreakdown?: boolean;
                    /** @description Desired data type, dailyNotionalVolume by default. */
                    dataType?: "dailyPremiumVolume" | "dailyNotionalVolume" | "totalPremiumVolume" | "totalNotionalVolume";
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/overview/options/{chain}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List all options dexs along with summaries of their volumes and dataType history data filtering by chain */
        get: {
            parameters: {
                query?: {
                    /** @description true to exclude aggregated chart from response */
                    excludeTotalDataChart?: boolean;
                    /** @description true to exclude broken down chart from response */
                    excludeTotalDataChartBreakdown?: boolean;
                    /** @description Desired data type, dailyNotionalVolume by default. */
                    dataType?: "dailyPremiumVolume" | "dailyNotionalVolume" | "totalPremiumVolume" | "totalNotionalVolume";
                };
                header?: never;
                path: {
                    /** @description chain name, list of all supported chains can be found under allChains attribute in /overview/options response */
                    chain: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/summary/options/{protocol}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get summary of options dex volume with historical data */
        get: {
            parameters: {
                query?: {
                    /** @description Desired data type, dailyNotionalVolume by default. */
                    dataType?: "dailyPremiumVolume" | "dailyNotionalVolume" | "totalPremiumVolume" | "totalNotionalVolume";
                };
                header?: never;
                path: {
                    /** @description protocol slug */
                    protocol: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/overview/fees": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List all protocols along with summaries of their fees and revenue and dataType history data */
        get: {
            parameters: {
                query?: {
                    /** @description true to exclude aggregated chart from response */
                    excludeTotalDataChart?: boolean;
                    /** @description true to exclude broken down chart from response */
                    excludeTotalDataChartBreakdown?: boolean;
                    /** @description Desired data type, dailyFees by default. */
                    dataType?: "totalFees" | "dailyFees" | "totalRevenue" | "dailyRevenue";
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/overview/fees/{chain}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List all protocols along with summaries of their fees and revenue and dataType history data by chain */
        get: {
            parameters: {
                query?: {
                    /** @description true to exclude aggregated chart from response */
                    excludeTotalDataChart?: boolean;
                    /** @description true to exclude broken down chart from response */
                    excludeTotalDataChartBreakdown?: boolean;
                    /** @description Desired data type, dailyFees by default. */
                    dataType?: "totalFees" | "dailyFees" | "totalRevenue" | "dailyRevenue";
                };
                header?: never;
                path: {
                    /** @description chain name, list of all supported chains can be found under allChains attribute in /overview/fees response */
                    chain: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/summary/fees/{protocol}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get summary of protocol fees and revenue with historical data */
        get: {
            parameters: {
                query?: {
                    /** @description Desired data type, dailyFees by default. */
                    dataType?: "totalFees" | "dailyFees" | "totalRevenue" | "dailyRevenue";
                };
                header?: never;
                path: {
                    /** @description protocol slug */
                    protocol: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description successful operation */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: never;
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
